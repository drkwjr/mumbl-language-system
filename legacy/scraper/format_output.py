#!/usr/bin/env python3
"""
Format Wiktionary JSON output to a more readable format.

This script takes a JSON file generated by the Wiktionary scraper and formats it
into a more readable markdown format.
"""

import argparse
import json
import re
import sys
from datetime import datetime
from pathlib import Path


def format_word_data(word_data):
    """
    Format a single word's data into a readable markdown format.
    
    Args:
        word_data (dict): The word data dictionary
        
    Returns:
        str: Formatted markdown string
    """
    formatted_text = []
    
    # Word and language
    formatted_text.append(f"**Word:** {word_data['word']}")
    formatted_text.append("")
    formatted_text.append(f"**Language:** {word_data['language']}")
    formatted_text.append("")
    
    # Definitions (numbered list)
    if word_data.get('definitions'):
        formatted_text.append("**Definitions:**")
        for i, definition in enumerate(word_data['definitions'][:15], 1):  # Limit to 15 definitions
            # Clean up definition for better readability
            def_text = re.sub(r'\s+', ' ', definition).strip()
            # Limit length for readability
            if len(def_text) > 100:
                def_text = def_text[:97] + "..."
            formatted_text.append(f"    {i}. {def_text}")
        formatted_text.append("")
    
    # Pronunciations (bullet list)
    if word_data.get('pronunciations'):
        formatted_text.append("**Pronunciations:**")
        for pronunciation in word_data['pronunciations'][:10]:  # Limit to 10 pronunciations
            formatted_text.append(f"    • {pronunciation}")
        formatted_text.append("")
    
    # Examples (bullet list)
    if word_data.get('examples'):
        formatted_text.append("**Examples:**")
        # Limit to 10 examples for readability
        for example in word_data['examples'][:10]:
            # Clean and format example
            example_text = re.sub(r'\s+', ' ', example).strip()
            if len(example_text) > 100:
                example_text = example_text[:97] + "..."
            formatted_text.append(f"    • \"{example_text}\"")
        formatted_text.append("")
    
    # Part of Speech (if available)
    if word_data.get('part_of_speech') and word_data['part_of_speech']:
        formatted_text.append("**Part of Speech:**")
        for pos in word_data['part_of_speech'][:5]:  # Limit to 5 parts of speech
            formatted_text.append(f"    • {pos}")
        formatted_text.append("")
    
    # Etymology (if available)
    if word_data.get('etymology') and word_data['etymology']:
        formatted_text.append("**Etymology:**")
        for etym in word_data['etymology'][:2]:  # Limit to 2 etymologies
            # Clean and format etymology
            etym_text = re.sub(r'\s+', ' ', etym).strip()
            if len(etym_text) > 100:
                etym_text = etym_text[:97] + "..."
            formatted_text.append(f"    • {etym_text}")
        formatted_text.append("")
    
    # Related Words (if available)
    if word_data.get('related_words') and word_data['related_words']:
        formatted_text.append("**Related Words:**")
        for related in word_data['related_words'][:10]:  # Limit to 10
            formatted_text.append(f"    • {related}")
        formatted_text.append("")
    
    # URL and Scrape Date
    formatted_text.append(f"**URL:** {word_data.get('url', 'Not available')}")
    formatted_text.append(f"**Scrape Date:** {word_data.get('scrape_date', 'Not available')}")
    formatted_text.append("")
    formatted_text.append("---")  # Separator between words
    
    return "\n".join(formatted_text)


def format_json_file(input_file, output_file=None, print_output=False):
    """
    Format a JSON file from the Wiktionary scraper to a more readable markdown format.
    
    Args:
        input_file (str): Path to the input JSON file
        output_file (str, optional): Path to the output markdown file. If None, constructs a path
                                    based on the input file name.
        print_output (bool): Whether to print the formatted output to the console
    
    Returns:
        str: Path to the output file
    """
    # Load the JSON data
    with open(input_file, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    # Determine output file path
    if output_file is None:
        input_path = Path(input_file)
        output_dir = input_path.parent / "formatted"
        output_dir.mkdir(parents=True, exist_ok=True)
        output_file = output_dir / f"{input_path.stem}_formatted.md"
    
    # Extract language from first word if available
    language = "unknown"
    if data and isinstance(data, list) and len(data) > 0:
        language = data[0].get('language', 'unknown')
    
    # Format each word
    formatted_words = []
    for word_data in data:
        formatted_words.append(format_word_data(word_data))
    
    # Write to output file
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(f"# Wiktionary Data - {language.upper()}\n\n")
        f.write(f"*Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*\n\n")
        
        for formatted_word in formatted_words:
            f.write(formatted_word)
            f.write("\n\n")
    
    print(f"Formatted output saved to {output_file}")
    
    # Print formatted output to console if requested
    if print_output:
        print("\n\n" + "=" * 80)
        print(f"FORMATTED OUTPUT FOR {language.upper()}")
        print("=" * 80 + "\n")
        
        for formatted_word in formatted_words:
            print(formatted_word)
            print("\n")
    
    return output_file


def main():
    """Main function to handle command line arguments"""
    parser = argparse.ArgumentParser(description='Format Wiktionary JSON output to a more readable format')
    parser.add_argument('input_file', help='Path to the input JSON file')
    parser.add_argument('--output', '-o', help='Path to the output markdown file')
    parser.add_argument('--print', '-p', action='store_true', help='Print formatted output to console')
    
    args = parser.parse_args()
    
    format_json_file(args.input_file, args.output, args.print)


if __name__ == "__main__":
    main() 